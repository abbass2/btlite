# $$_ Lines starting with # $$_* autogenerated by jup_mini. Do not modify these
# $$_code
# $$_ %%checkall

import logging
import sys
import os
import tempfile


def _add_stream_handler(logger: logging.Logger, 
                        log_level: int = logging.INFO, 
                        formatter: logging.Formatter | None = None) -> None:
    LOG_DATE_FORMAT = '%Y-%m-%d %H:%M:%S'
    LOG_FORMAT = '[%(asctime)s.%(msecs)03d %(funcName)s] %(message)s'
    if formatter is None: formatter = logging.Formatter(fmt=LOG_FORMAT, datefmt=LOG_DATE_FORMAT)
    stream_handler = logging.StreamHandler(sys.stdout)
    stream_handler.setFormatter(formatter)
    stream_handler.setLevel(log_level)
    logger.addHandler(stream_handler)


def get_main_logger() -> logging.Logger:
    main_logger = logging.getLogger('pq')
    if len(main_logger.handlers): return main_logger
    _add_stream_handler(main_logger)
    main_logger.setLevel(logging.INFO)
    main_logger.propagate = False
    return main_logger


def get_child_logger(child_name: str) -> logging.Logger:
    _ = get_main_logger()  # Init handlers if needed
    full_name = 'pq.' + child_name if child_name else 'pq'
    logger = logging.getLogger(full_name)
    return logger


def in_debug() -> bool:
    if 'PQ_DEBUG_MODE' in os.environ: return True
    return False


class PQException(Exception):
    pass


def assert_(condition: bool, msg: str | None = None) -> None:
    '''
    Like a python assert but raises an exception that is not turned off by 
    using the python optimization switch
    '''
    if msg is None: msg = ''
    if not condition:
        if in_debug():
            import pdb
            pdb.set_trace()
        raise PQException(msg)


def get_temp_dir() -> str:
    if os.access('/tmp', os.W_OK):
        return '/tmp'
    else:
        return tempfile.gettempdir()


if __name__ == '__main__':
    logger = get_child_logger(__name__)
    import doctest
    doctest.testmod(optionflags=doctest.NORMALIZE_WHITESPACE)

# $$_end_code
